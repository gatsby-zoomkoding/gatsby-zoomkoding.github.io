{"componentChunkName":"component---src-templates-category-template-js","path":"/posts","result":{"pageContext":{"currentCategory":"All","categories":["All","알고리즘","회고","웹공부","블로그","PS","프로젝트","스타트업"],"edges":[{"node":{"id":"e2eb19a4-0725-5ade-b9b4-d0c129c1e88d","excerpt":"제 블로그의 테마나 Gatsby의 다른 테마를 활용해서 Github Blog를 만들고 싶은 분들을 계실텐데요! 이런 분들에게 도움을 드리고자 이 글을 쓰게 되었습니다. 잘 안되는 부분이나 궁금한 점을 댓글로 남겨주면 찾아보고 답변을 달아보도록 하겠습니다! 1. Repository 생성하기 GitHub Blog를 만들려면 Github에 Repository를 생성해야 합니다.  GitHub에 로그인 한 뒤에 우측 상단에 있는 New Repository 버튼을 클릭하면 repository 생성 페이지로 이동하게 됩니다. 이 때 Import a repository 버튼을 클릭합니다.  아래 페이지에 도달하시면 두 가지 정보를…","fields":{"slug":"/gatsby-github-blog/"},"frontmatter":{"categories":"블로그","title":"Gatsby 테마로 GitHub Blog 만들기","date":"July 06, 2021"}},"next":{"fields":{"slug":"/why-dev-blog/"}},"previous":null},{"node":{"id":"cda374f7-9af4-5612-8781-5504d3fdaff9","excerpt":"🙋‍♂️ 내 소개 + 블로그 소개  나는 개발 4년차, 블로그 4년차인 개발자 줌코딩이다👋 개발을 시작하고 얼마지 않아 블로그를 운영하기 시작했고, 개발도 블로그도 꾸준히 운영하다보니 글의 양도 많아지고 글을 읽어주시는 분들의 수도 점차 늘어났다. (어느새 페이지뷰 수도 꽤 많이 늘었다🌝)  그렇게 블로그에 점점 애정이 생겨가면서 자연스럽게 내 블로그를 직접 개발하여 커스터마이징해보고 싶은 욕심이 생겼다. 그리고 올해 입사를 하게 되어 입사 전 마지막 프로젝트로 개발 블로그를 직접 디자인하고 개발해보게 되었다.  블로그를 이전하고 처음 쓰는 글로 내 블로그 경험을 나누면 좋겠다는 생각에 이 글을 쓰게 되었다. 블로그에 관심…","fields":{"slug":"/why-dev-blog/"},"frontmatter":{"categories":"블로그 회고","title":"왜 개발 블로그를 하시나요?","date":"June 23, 2021"}},"next":{"fields":{"slug":"/gatsby-starter-zoomkoding-introduction/"}},"previous":{"fields":{"slug":"/gatsby-github-blog/"}}},{"node":{"id":"e07a8c9c-ba6f-5e7e-935f-c3dc648174b9","excerpt":"👋 소개 예쁘고 깔끔한 개발 블로그를 만들고 싶으신 개발자분들을 위해 만들게 된 블로그 테마입니다.🏅 ✨ 기능 😛 미모지와 문자 애니메이션를 통한 자기 소개 💅 코드 하이라이팅 기능 🔍 글 목차 자동 생성(ToC) 💬 Utterances 댓글 기능 지원 ⚙️ meta-config를 통한 세부 설정 가능 👨‍💻 About Page 내용 변경 가능 📚 Posts Page 자동 생성 🛠 sitemap.xml, robots.txt 자동 생성 📈 Google Analytics 지원 🧢 Emoji 지원 𝑓 Mathjax 지원 🚀 시작하기 아래 과정을 진행하면 현재 블로그를 로컬 환경에서 실행하고 배포할 수 있습니다. 🔧 설치하기 아래…","fields":{"slug":"/gatsby-starter-zoomkoding-introduction/"},"frontmatter":{"categories":"블로그","title":"예쁜 Gatsby 테마로 나만의 개발 블로그 만들기","date":"March 22, 2021"}},"next":{"fields":{"slug":"/college-timetable-development/"}},"previous":{"fields":{"slug":"/why-dev-blog/"}}},{"node":{"id":"292d0ade-2db9-559f-bf86-d1af6236b490","excerpt":"🤓 이 글의 목적 입사하기 전 한달 조금 넘는 기간 동안 개인 프로젝트를 진행했다. 이 프로젝트는 찐 개인 프로젝트로 기획, 디자인, 개발, 홍보, 유지보수까지 다 직접 진행하여 현재 서비스하고 있다. 이 글을 통해 이 프로젝트의 과정과 경험을 나눠보고자 한다. 🧩 대학시간은..! 대학시간은 수강신청을 도와주는 웹사이트로, 1월 중순에 배포하여 유지보수를 진행하고 있다.  웹사이트 링크 깃헙레포 링크 감사하게도 한학기 학생 수의 절반이 넘는 1600명이 대학시간을 이용했다!🌝 먼저, 개발에 사용한 기술스택은 다음과 같다.  🎨 직접 기획하고 디자인하기 작년 우아한테크캠프에서 만났던 해민이와의 프로젝트 이후에 디자인에 …","fields":{"slug":"/college-timetable-development/"},"frontmatter":{"categories":"프로젝트 회고","title":"(개인프로젝트 개발 회고) 대학시간 개발기","date":"February 10, 2021"}},"next":{"fields":{"slug":"/2020-4th-quarter-retrospection/"}},"previous":{"fields":{"slug":"/gatsby-starter-zoomkoding-introduction/"}}},{"node":{"id":"a9918a95-bcd3-58f5-857e-b1d80251bfc3","excerpt":"🤓 이 글의 목적 정말 오랜만에 글을 쓴다. 이 글을 통해 복학과 동시에 시작된 혼돈의 시간와 지금을 되돌아 보려 한다.   🤯 혼돈의 카오스 그리고 알게된 소중한 시간 🎓 복학, 조기 취업 그리고 취업계 Picky와 우아한테크캠프(우테캠)를 거치며 여러 훌륭한 사람들을 많이 만났다. 그리고 내가 꿈꾸는 개발자로서 미래의 이상적인 모습을 어렴풋이 그리게 되었다. 그 모습을 향해 적극적으로 달려보고 싶었지만, 아직 대학교라는 큰 산을 마무리하지 못한 상황이기에 나는 다시 포항으로 돌아가야만 했다. 학교는 배우는 기관이니 가서 열심히 배우고 돌아오겠다는 마음으로 마음을 다잡고 포항으로 돌아왔다. 하지만 아무래도 오랜만에 …","fields":{"slug":"/2020-4th-quarter-retrospection/"},"frontmatter":{"categories":"회고","title":"2020년 마지막 회고(쉴 줄 모르는 자)","date":"February 10, 2021"}},"next":{"fields":{"slug":"/2020-ACM-ICPC-1/"}},"previous":{"fields":{"slug":"/college-timetable-development/"}}},{"node":{"id":"79653829-9e17-5119-a8a2-8ffc58acf15d","excerpt":"마지막 ICPC 참가 내년 10월에는 학교에 있을 가능성이 거의 0에 가깝기에 이제 진짜 마지막으로 ICPC에 참여하게 되었다. 작년에 Negend라는 팀명으로 함께 참가했던 진혀쿠님과 갇예준이 다 재학생인 덕분에 또다시 같은 팀으로 참가하게 되었다. 작년에 등록 문제를 제외하고 3문제를 풀었기에 등수보다는 4문제 푸는 것을 목표로 참가했다. 대회 후기 작년에는 대회 전날 엄청 긴장했었는데 오늘은 그런 것도 없었고 확실히 마음이 편했다. 하지만 막상 대회 시작하니 한국어 독해에 조금은 문제가 생겼었다 ㅋㅋ 진혁이랑 예준이랑 작년 ICPC 이후로 처음 같이 풀었는데 각자 자신의 방법으로 팀에 기여했다. 그리고 어찌어찌 …","fields":{"slug":"/2020-ACM-ICPC-1/"},"frontmatter":{"categories":"PS","title":"2020 ACM ICPC 예선 참가 후기 및 문제 풀이 (5 Solved)","date":"October 11, 2020"}},"next":{"fields":{"slug":"/woowa-tech-camp-final/"}},"previous":{"fields":{"slug":"/2020-4th-quarter-retrospection/"}}},{"node":{"id":"d2c75ef3-9184-5ec9-92f4-e7ceb6f62068","excerpt":"💫 목적 캠프의 반환점을 돌며 포스팅을 썼으니 캠프의 마무리 회고를 잘 쓰고 캠프를 끝맺고 싶었지만, 복학과 함께 4학년 생활을 시작하게 되면서 끝을 보지 못했다😭 그렇게 방치했던 회고였지만 이제는 진짜로 우아한테크캠프의 마무리를 지어 보려 한다!ㅎㅎ 일단 수료증 사진 투척하고 간다~ㅋㅋ  우아한테크캠프의 마지막 2개의 프로젝트 일단 나는 매우매우 인복이 좋은 사람이다. 이전 프로젝트에서도 그랬지만 마지막 두개의 프로젝트를 함께할 팀원 명단을 보고 매우 안도했다. 그리고 실제로 프로젝트를 하며 많이 배우고 제법 완성도 있는 결과물도 만들어 내게 되었다. 우아한가계부(with 갇해민) 결과물 링크 프로젝트 링크 해민이(…","fields":{"slug":"/woowa-tech-camp-final/"},"frontmatter":{"categories":"회고","title":"(우아한테크캠프 3기) 캠프를 마치며","date":"October 05, 2020"}},"next":{"fields":{"slug":"/woowa-tech-camp-mid-term/"}},"previous":{"fields":{"slug":"/2020-ACM-ICPC-1/"}}},{"node":{"id":"59c34b46-cb47-5990-9153-4804c727214f","excerpt":"💫 목적 우아한테크캠프(우테캠)의 중간 즈음 온 시점에서 4주 동안 참여했던 캠프의 과정들에서 경험했던 것들과 배웠던 것들을 돌아보고자 한다. 🤓  🌪 시작 전 두려움 합격 통보를 받고 퇴사 회고를 쓰며 나름 결의를 다졌지만 막상 7월 1일이 다가오기 앞서서 고민하기 시작했다. 붙으면 완전 신나서 올 줄 알았는데 막상 가려니 어떻게 보면 배부른 고민(?)이 생겨났다.😭 ♘♞ 또 다른 경쟁의 시작? (#우아한형제들입사)  사실 우테캠를 시작하기 전에 마음이 굉장히 어려웠다. 온전히 배움에 집중하기 위해 우테캠에 참여하게 됐지만 결국 이 프로그램은 우아한 형제들 신입 채용이 포함되어 있는 과정이라 배움보다 잘하는 걸 보여…","fields":{"slug":"/woowa-tech-camp-mid-term/"},"frontmatter":{"categories":"회고","title":"(우아한테크캠프 3기) 캠프의 반환점을 돌며","date":"July 26, 2020"}},"next":{"fields":{"slug":"/css-layout/"}},"previous":{"fields":{"slug":"/woowa-tech-camp-final/"}}},{"node":{"id":"0b8dd6c2-6000-5c50-9acd-ad5c2e932149","excerpt":"🤔 목적 css를 진짜 많이 얕봤다.. flutter를 이용해서 UI 구현해내는 일에 이제 익숙해졌기 때문에 스타일링 하는 것은 진짜 가볍게 여겼다가 큰코 다쳤다. 이번에 겸손한 마음으로 css 기초부터 반응형으로 레이아웃을 잡는 여러 좋은 방법들에 대해 조사해봤고 마지막으로 간단하게 github project를 따라하며 실습을 진행했다. 📗 참고 자료 poiemaweb 튜토리얼 flex box로 만들 수 있는 10가지 레이아웃(네이버 D2) 📦 Box Sizing  브라우저는 박스모델의 정보를 근거로 렌더링을 진행한다. 여기서 width와 height는 박스의 전체 사이즈를 말하는 것이 아니라 파란색 영역인 cont…","fields":{"slug":"/css-layout/"},"frontmatter":{"categories":"웹공부","title":"어렵지 않게 CSS 레이아웃 잡기","date":"July 14, 2020"}},"next":{"fields":{"slug":"/express-middleware-log-in/"}},"previous":{"fields":{"slug":"/woowa-tech-camp-mid-term/"}}},{"node":{"id":"9dcdd877-1e19-5982-8454-91564fc8810b","excerpt":"🧩 목적 express의 특징에 대해서는 Node 개발자라면 알아야 할 기본 지식 포스팅을 통해 정리했으니 이번에는 express generator로 생성되는 여러 미들웨어와 로그인 프로그램 구현에 사용된 미들웨어를 정리해보려고 한다. 📽️ 프로젝트 깃헙 레포지토리 [우아한테크캠프] 배민상회 회원가입/로그인 구현 프로젝트 🏭 Express 주요 미들웨어 pug Express는 런타임에 템플릿 엔진을 이용해서 여러 변수가 있는 static한 템플릿 파일에 실제 값을 넣어 html 파일을 생성한다. Pug는 가장 대표적인 템플릿엔진으로 템플릿이 있는 디렉토리를 views에 정해주고 view engine으로 pug로 설정해주…","fields":{"slug":"/express-middleware-log-in/"},"frontmatter":{"categories":"웹공부","title":"Express 미들웨어 제대로 사용하기 + 로그인 구현하기","date":"July 12, 2020"}},"next":{"fields":{"slug":"/test-driven-development/"}},"previous":{"fields":{"slug":"/css-layout/"}}},{"node":{"id":"ff39fe47-07a1-5a3b-9794-0646596aeeb4","excerpt":"🧪 TDD란 Test Driven Development : 말그대로 테스트가 이끌어 나가는 개발을 의미한다. 개발을 진행하기 앞서 테스트를 먼저 만들거 테스트를 통과하기 위한 것들을 구현한다. 📒 참고글 [Agile] TDD(테스트 주도 개발)란 [번역]쉬운 테스트 주도 개발과 단위 테스트를 위한 5단계 방법론 ❓ TDD는 언제 해야할까? 처음해보는 프로그램 주제일 때(나의 불확실성) 고객 요구조건이 바뀔 수 있는 프로젝트인 경우(외부적인 불확실성) 즉 불확실성이 높으면 테스트를 짠다. 결과가 명확하다면 TDD를 적용하지 않는게 좋다. 🤩 TDD를 잘하는 법 도구나 규칙에 집착하지 말아라(TDD는 어떤 도구가 아니다.…","fields":{"slug":"/test-driven-development/"},"frontmatter":{"categories":"웹공부","title":"Test Driven Development란?","date":"July 10, 2020"}},"next":{"fields":{"slug":"/atomic-design-pattern/"}},"previous":{"fields":{"slug":"/express-middleware-log-in/"}}},{"node":{"id":"1d6d946b-a466-58e7-88ea-cb6960a2bbc9","excerpt":"🤔 목적 Atomic Design Pattern을 본격적으로 적용하기에 앞서 글을 적어보려고 한다. 이 패턴을 설명하는 여러 블로그글을 가볍게 훑어보고 글들 마다 있는 아래 그림을 보면서 작은 단위의 컴포넌트인 원자를 잘 만들어서 개발하는 느낌이구나하고 넘어갔다.  하지만 막상 구현하기 앞서 여러 글들을 진득하게 앉아서 읽어보니 중점적으로 신경써야하는 부분이 있었다. 그리고 가장 많이 생각 났던 것은 피키를 개발할때 디자이너님과 함께 적용시켜봤으면 너무 좋았을 것 같은 방식이었다. 우아한테크캠프의 프로젝트를 진행하면서 잘 배워서 언젠가 하게 될 또 다른 피키에 잘 적용시켜보자. 📒 참고 글 Brad Frost의 개념적…","fields":{"slug":"/atomic-design-pattern/"},"frontmatter":{"categories":"웹공부","title":"Atomic Design Pattern이 뭐지?","date":"July 09, 2020"}},"next":{"fields":{"slug":"/start-up-retrospection/"}},"previous":{"fields":{"slug":"/test-driven-development/"}}},{"node":{"id":"aecff968-148d-5ba9-bedb-b274b16fdec3","excerpt":"이 글의 목적 나의 스타트업 앱 개발 후기에 대한 글을 읽었다면 알겠지만 나는 패기롭게 도전한 스타트업에서 우연한(?) 기회로 홀로 피키라는 앱을 개발하고 배포하게 되었다. 이제는 6개월 간의 피키에서의 시간을 마무리하고 다음 여정을 준비하고 있다. 이 글을 통해 그동안 나는 어떤 것들을 배웠는지 내가 왜 이런 피키를 떠나게 됐는지를 정리하고 나눠보려고 한다. 배포 이후 피키는 그동안 나는 들어온 개발자들과 함께 최근까지 2달 동안 열심히 버그를 고치고, 새로운 기능을 추가하는 사이클을 반복하며 앱을 성장시켰다. 그동안 로그인 유저 수는 2000명을 넘겼고 앱에 대한 리뷰도 긍정적이었고 앱은 꾸준히 성장하고 있다.  …","fields":{"slug":"/start-up-retrospection/"},"frontmatter":{"categories":"스타트업 회고","title":"스타트업 팀과 앱을 떠나보내며 (퇴사 회고)","date":"June 30, 2020"}},"next":{"fields":{"slug":"/node-developer-basic/"}},"previous":{"fields":{"slug":"/atomic-design-pattern/"}}},{"node":{"id":"6da3ef06-ad8c-5976-8d48-8fa479c8d5d8","excerpt":"배경 면접에서 다음과 같은 질문을 받게 됐다. 노드를 이용해서 개발을 여러번 진행하셨는데, 자바스크립트와 노드의 특징에 대해 알고 있나요? ‘비동기’, ‘싱글스레드’, ‘이벤트루프’…? 머리속에 여러가지 개념들이 막 돌았다. 근데 막상 이 여렴풋이 아는 개념을 제대로 설명을 하려니 말문이 막혔다. 면접이 끝난 후에 면접을 세게 맞았지만 그렇다고 그냥 모르는 대로 있을 순 없다. 그래 이왕 이렇게 된 거 자바스크립트와 노드의 특징에 대해서 집고 넘어가자. Javascript란? 1. 자바스크립트는 스크립트 언어다. 자바스크립트는 웹 브라우저에서 동작하는 스크립트 언어이다. 한번에 모든 코드를 기계어로 번역하는 컴파일 언…","fields":{"slug":"/node-developer-basic/"},"frontmatter":{"categories":"웹공부","title":"Node 개발자라면 알아야 할 기본 지식(Javascript, Node, Express)","date":"June 04, 2020"}},"next":{"fields":{"slug":"/start-up-app-development/"}},"previous":{"fields":{"slug":"/start-up-retrospection/"}}},{"node":{"id":"8db3b577-4127-592b-b207-a941e6eb3a33","excerpt":"목적 개발자를 꿈꾸는 사람이라면 실제 취업을 하기 전에 인턴을 할까 개발 캠프에 참여해야 하나 이런 저런 고민이 많아질 것이다. 개발자를 필요로 하는 곳이 많기 때문에 그만큼 기회도 많고 어떤 게 나에게 제일 좋은 기회일지 고민하고 있을지도 모르겠다. 이런 고민 속에서 혹시 에 관심이 있을 이들에게 개인적인 경험을 나누고자 한다. 결과적으로 나는 나는 대학교 3학년으로 작은 스타트업의 개발 인턴이다. 채용은 웹 프론트엔드 개발 인턴으로 채용되었지만 2달 만에 회사가 사업 방향을 바꾸게 되면서 얼떨결에 1인 개발자로 풀스택(?) 앱개발을 진행하게 되었다. 그리고 한달 반 동안 5명의 팀원들과 함께 시간을 갈아넣은 끝에 …","fields":{"slug":"/start-up-app-development/"},"frontmatter":{"categories":"회고 프로젝트 스타트업","title":"대학생 개발자의 스타트업 앱 개발 후기","date":"March 25, 2020"}},"next":{"fields":{"slug":"/how-to-algo/"}},"previous":{"fields":{"slug":"/node-developer-basic/"}}},{"node":{"id":"2e0a127e-83cc-5887-a016-24dccdbe6e9f","excerpt":"목적 요즘은 IT 기업에 개발자로 취업하기 위해서 코딩테스트라는 관문을 통과해야하는 경우가 허다하다. 이러한 기업들의 요구 때문인지 자연스럽게 코딩테스트를 위한 알고리즘 공부를 중요시 하고 있고 심지어 코딩테스트를 대비하기 위한 알고리즘 학원과 300만원이 넘는 방학 집중 코스까지 생겨났다.  나도 알고리즘을 시작하려던 때에 어떻게 하면 알고리즘을 제대로 효율적으로 배울까를 고민하며 알고리즘 공부법에 대한 블로그글, 유투브 영상 등을 찾아다녔고 알고리즘학원에 직접 전화해보기도 했다. 나와 같은 고민을 하는 분들에게 내가 공부했던 비효율적이지만 효율적인 알고리즘 공부법을 소개하고자 한다. 알고리즘 공부법을 찾는 당신에게…","fields":{"slug":"/how-to-algo/"},"frontmatter":{"categories":"회고 알고리즘","title":"나의 비효율적이지만 효율적인 알고리즘 공부법 (코딩테스트를 준비하는 이들에게)","date":"December 05, 2019"}},"next":{"fields":{"slug":"/codeforces-round-77/"}},"previous":{"fields":{"slug":"/start-up-app-development/"}}},{"node":{"id":"af934573-71af-5d22-84ac-7df1e82c29b9","excerpt":"후기 A부터 C번까지 수학 문제만 내버렸다.. 간신히 C번까지 풀긴 했는데 제출을 어마무지하게 많이 해버렸다… 제출 횟수가 아쉬운 시험이었다. C번에서 1시간 넘게 걸렸는데 D를 못본건 아쉽지만 어떻게든 C를 풀었다는 사실에 만족한다!  A. Heating 문제 링크 이 문제는 이해하는데만 10분이 걸렸다.(영어가 안되는건지 그냥 이해가 너무 어려웠다.) 이 문제는 크게 두 경우로 나눌 수 있다. (10000, 10)처럼 설치할수 있는 라디에이터 개수가 섹션의 개수보다 많거나 같은 경우와 그렇지 않은 경우이다. (10000, 10)과 같은 경우에는 그냥 라디에이터를 각 위치에 1 만큼씩 배치하는게 이득이다. 하지만 나…","fields":{"slug":"/codeforces-round-77/"},"frontmatter":{"categories":"PS","title":"Codeforces Educational Round 77 후기 및 문제 풀이","date":"November 28, 2019"}},"next":{"fields":{"slug":"/2019-naver-hack-day/"}},"previous":{"fields":{"slug":"/how-to-algo/"}}},{"node":{"id":"ceb582ad-7291-5a5c-b79e-caae344a0938","excerpt":"포스팅  네이버 핵데이는 대학생 개발자라면 꼭 참여해봐야할 해커톤 대회 중 하나로 여럿에게 추천을 받았다. 어찌하다 보니 참여하게 된 캠퍼스 핵데이 경험을 공유하고자 한다. 정신없이 참여하다보니 사진이 별로 없다ㅠㅠㅠ 후기가 궁금하다면 아래 있는 후기만 봐도 좋지만 전반적인 핵데이에 대해서 궁금하다면 이 포스팅을 쭉 읽어도 좋을 것 같다. 후기 일단 소문대로 밥은 너무 맛있고 숙소도 아침에 구경차 한번 가봤는데 진짜 쾌적했다. 멘토님은 진짜 친절했고 해뜨는 거 보면서 멘티들과 나눈 소소한 각자 이야기들도 너무 좋았다. 커넥트원에서 보는 야경도 진짜 너무 이뻤다. 기술적인 것도 물론이지만 무엇을 어떻게 해야하는지에 대해…","fields":{"slug":"/2019-naver-hack-day/"},"frontmatter":{"categories":"회고","title":"2019 NAVER CAMPUS HACKDAY WINTER 참가 후기","date":"November 26, 2019"}},"next":{"fields":{"slug":"/codeforces-round-600/"}},"previous":{"fields":{"slug":"/codeforces-round-77/"}}},{"node":{"id":"7a5c2c0c-d7c8-5aab-87b7-b4d709d7465e","excerpt":"후기 블루의 문턱에 가까워지고 있음을 느끼며 쳤던 시험.. 등록하는 걸 깜빡해서 추가 신청하고 허둥지둥 시험을 쳐버렸다.  결과는… 4문제를 풀어 3373점으로 역대 최고점…!!!! 블루 넘나 싶었는데 아니나 다를까 이번 휴학의 하나의 목표인 코드포스 블루를 찍어버렸다!!ㅎㅎㅎ  간단하게 문제 풀이를 해보도록 하겠다! A. Single Push 문제 링크 이 문제는 차이가 같은 구간이 1개 이하로 있다면 YES 아니면 NO를 출력하면 되는 문제이다. 마음이 급하다 보니 간단한 구현 문제인데도 허둥지둥했다. 다행히 10분만에 제출한 게 정답이 됐다. B. Silly Mistake 문제 링크 이 문제도 어떻게 보면 현재 …","fields":{"slug":"/codeforces-round-600/"},"frontmatter":{"categories":"PS","title":"Codeforces Round 600 (Div. 2) 후기 및 문제 풀이 (드디어 코포 블루)","date":"November 17, 2019"}},"next":{"fields":{"slug":"/kmp/"}},"previous":{"fields":{"slug":"/2019-naver-hack-day/"}}},{"node":{"id":"8ede0a31-619d-5881-a4e5-9bb3e33e803a","excerpt":"참고 자료 본 글은 내가 정리하기 위해 따로 해놓은 것으로 나는 갓멍멍님의 글을 참고했다. KMP 알고리즘 KMP 알고리즘은 문자열(텍스트)에서 특정 문자열(패턴)을 효율적으로 찾아내기 위한 방법이다. 문자열(T)에서 패턴(P)를 찾아내는데 필요한 시간이 O(N*M)이라고 할때 이 알고리즘을 사용하면 O(N+M)만에 처리 가능하다! 문자열의 i번째부터 패턴 j번째와 비교할 때 다를 경우에 문자열의 i+1 과 패턴의 0번째 부터 비교를 하는 것이 아니라 이미 같았던 부분 중 패턴을 굳이 처음부터 하지 않아도 되는 경우는 j를 0이 아닌 pi[j]에서 진행하도록 한다. 쓸만한 정보 Pi(접두사와 접미사) 이 알고리즘에서 …","fields":{"slug":"/kmp/"},"frontmatter":{"categories":"알고리즘","title":"(알고리즘) KMP 문자 검색 알고리즘 + 백준 1786번 찾기","date":"September 16, 2019"}},"next":{"fields":{"slug":"/lca/"}},"previous":{"fields":{"slug":"/codeforces-round-600/"}}},{"node":{"id":"04f47d24-d1cd-55e7-ac34-b0722a26a2f8","excerpt":"LCA란 LCA란 Lowest Common Ancestor의 약자로 트리 속 두 노드의 가장 가까운 조상 노드를 의미한다. 이것을 BFS나 DFS를 이용해 모든 경로를 훑어봄으로써 두 노드 사이의 같은 조상을 찾을 수도 있겠지만 이를 더욱 빠르게 하기 위해 만든 알고리즘이 LCA 알고리즘이다. LCA 알고리즘 방법은 간단하다. 1.트리를 만들고 각 노드의 조상들을 저장한다. 2.두 노드의 깊이를 같게 깊이가 깊은 노드를 조상으로 업데이트 시켜준다. 3.두 노드를 조상으로 올리면서 가장 가까운 공통조상을 찾아준다. 트리 만들기 알고리즘 트리를 만드는 방법은 두가지가 있다. 자세한 내용은 코드를 보면서 설명하고자 한다. …","fields":{"slug":"/lca/"},"frontmatter":{"categories":"알고리즘","title":"(알고리즘) LCA 알고리즘 + C++ 예제코드","date":"July 27, 2019"}},"next":{"fields":{"slug":"/segment-tree/"}},"previous":{"fields":{"slug":"/kmp/"}}},{"node":{"id":"2d56adcf-0525-5246-bae0-22add439876c","excerpt":"세그먼트 트리란? 세그먼트 트리는 트리의 각 노드에 어레이 부분부분의 연산 결과를 미리 저장해놓으므로써 탐색 시간을 OlogN)으로 감소시켜준다. 주로 부분합, 부분최소, 최대값을 찾는데 사용된다. 세그먼트 트리 구조 세그먼트 트리의 리프 노드와 나머지 노드는 다음과 같은 의미를 가진다. 리프 노드 : 해당 어레이 값 다른 노드 : 오른쪽 자식과 왼쪽 자식을 연산한 결과 값 구조는 아래와 같은 구조를 가지게 된다. 사진 세그먼트 트리 만들기(합 구하기용) 만약 node를 root node로 주고 start, end를 어레이 전체 범위로 잡게 되면 리컬션을 통해 tree가 완성 된다. 세그먼트 트리 탐색(합 구하기용) …","fields":{"slug":"/segment-tree/"},"frontmatter":{"categories":"알고리즘","title":"(알고리즘) 세그먼트 트리 알고리즘 + 예제 코드","date":"July 13, 2019"}},"next":{"fields":{"slug":"/topological-sort/"}},"previous":{"fields":{"slug":"/lca/"}}},{"node":{"id":"5dca6838-df53-50cb-8edd-cc99b574c7b0","excerpt":"위상 정렬(Topological Sort)이란? 여태까지 정렬 기준이 였다면 위상정렬의 정렬 기준은 ‘위상’이다.\n여기서 위상이란 incoming edge의 수를 의미한다. 위상 정렬은 Directed Acyclic Graph(DAG)에서만 가능한 정렬방법이다. DAG란 각 edge가 방향을 가지고 있는데 cycle이 발생하지 않는 경우를 말한다. Cycle이 있으면 무한 루프를 발생시킬 것이다!! 보통 일의 순서를 정하는 알고리즘에서 많이 사용된다. Topological Sorting 알고리즘 알고리즘의 과정은 다음과 같다. 각 vertex의 위상(incoming edge의 수)를 저장한다. 정점(위상이 0인 노드)…","fields":{"slug":"/topological-sort/"},"frontmatter":{"categories":"알고리즘","title":"(알고리즘) 위상 정렬 Topological Sort + C++ 예제","date":"July 02, 2019"}},"next":{"fields":{"slug":"/linked-list/"}},"previous":{"fields":{"slug":"/segment-tree/"}}},{"node":{"id":"221f9b80-75a5-5e5a-b0a1-590f21dd6b11","excerpt":"링크드 리스트 링크드 리스트는 나의 오랜 숙적이다. 항상 최후의 방법으로 미뤄놓는 방법인데 알고리즘을 하면서 링크드 리스트를 사용하지 않고는 풀기 어려운 문제가 나와서 하는 수 없이 정리를 해본다ㅎㅎ 더블 링크드 리스트란? 보통 링크드 리스트라고 하면 다음 원소가 무엇인지(next)를 포인터로 연결해놓게 된다. 하지만 더블 링크드 리스트는 이전 원소의 값도 알려주는(prev) 포인터가 존재한다. 더블 링크드 리스트는 지금 element 이후와 이전의 원소 정보가 모두 필요할 때 사용한다. ex) 원소 정방향, 역방향으로 출력하기 참고 더블 링크드 리스트 참고 사이트 여기서 tail이 움직일 수 있게 코드를 수정했다. …","fields":{"slug":"/linked-list/"},"frontmatter":{"categories":"알고리즘","title":"(알고리즘) Double Linked List C++ 구현 알고리즘","date":"June 29, 2019"}},"next":{"fields":{"slug":"/mst/"}},"previous":{"fields":{"slug":"/topological-sort/"}}},{"node":{"id":"fd132d8a-7df1-5f51-a35e-5b3da1faeab3","excerpt":"Minimum Spanning Tree란? Minimum Spanning Tree란 Undirected Graph 내에서 Cycle이 발생하지 않는 한도 내에서 모든 vertex가 연결되있는 tree 중 weight의 합이 가장 작은 tree를 의미한다. 그렇기 때문에 무조건 Edge의 갯수는 Vertex 갯수 - 1 개이다. 어떻게 찾지? 일단 edge의 set인 A를 만들자 처음에 A가 빈 상태에서 하나씩 넣은 거다. 여기서 중요한 것은 safe edge만 넣는다. Safe Edge란 A가 MST의 subset이라면 A를 추가해도 MST의 subset을 유지할 때의 Edge를 의미한다. Kruskal 알고리즘의 기…","fields":{"slug":"/mst/"},"frontmatter":{"categories":"알고리즘","title":"(알고리즘) Minimum Spanning Tree MST 알고리즘 - Kruskal 알고리즘","date":"May 19, 2019"}},"next":{"fields":{"slug":"/union-find-2/"}},"previous":{"fields":{"slug":"/linked-list/"}}},{"node":{"id":"289941e7-8f43-50e2-ad7c-abc01f8991fa","excerpt":"기존 Rank 활용 방법 이전 포스트에서 그림으로 표현했듯이, union과 find를 계속 진행하다보면 worst case에서는 그림과 같이 나오게 된다. 사진 그림과 같이 작은 트리가 큰 트리에 붙는 형식으로 이는 Linked List의 형태를 띄게 된다. 이것의 시간 복잡도는 O(log n) 만큼 걸리게 된다. 이를 union by rank라고 한다. Path Compression 활용 방법 다른 방법이 또 있다면 path compression이다. 이 방법은 find()가 호출될 때 tree를 납짝하게 만드는 것이다. find()가 x에 대해서 호출되면 x로부터 root node를 찾기 시작한다. 찾아서 root…","fields":{"slug":"/union-find-2/"},"frontmatter":{"categories":"알고리즘","title":"(알고리즘) Union Find 알고리즘 강화버전 - Rank, Path Compression 사용","date":"May 19, 2019"}},"next":{"fields":{"slug":"/union-find/"}},"previous":{"fields":{"slug":"/mst/"}}},{"node":{"id":"3bc5cd1b-f0fe-5639-bc07-c76f175d1a6e","excerpt":"Disjoint-set 구조와 Union-Find 알고리즘이란? Disjoint set 이란 연결이 끊어진 원소들의 집합을 의미 한다. 이 데이터 구조를 위해서 Union-Find 알고리즘이 2가지 주요한 operation을 제공한다. Find : 어떤 원소가 어느 집합에 있는지 찾아준다. 주로 두개의 element가 같은 집합에 있는지 확인하는데 사용된다. Union : 2개의 집합을 하나의 집합으로 합쳐준다. 이 알고리즘은 Cycle을 찾는데 아주 용이하다. Union-Find의 활용 코드 (사이클 찾기) 사진 위와 같은 그래프 일 때 사이클 여부를 Union-find를 이용해서 확인해보자! 주석을 확인하면 훨씬 …","fields":{"slug":"/union-find/"},"frontmatter":{"categories":"알고리즘","title":"(알고리즘) Disjoint Set 구조와 Union Find 알고리즘","date":"May 19, 2019"}},"next":{"fields":{"slug":"/shortest-path/"}},"previous":{"fields":{"slug":"/union-find-2/"}}},{"node":{"id":"abbb2987-1dd9-583c-8830-a441a6af66d6","excerpt":"Shortest Path 최단경로를 찾는 문제의 특징은 다음과 같다. Input : directed graph G = (V, E) with weight function w : E -> R S에서 D까지의 minimum weight을 가지는 path를 찾는 문제이다. Weight w(p) of path p : p로 가는 길에 있는 모든 edge weight의 합이다. u부터 v 까지의 shortest-path weight은 다음으로 표현한다 S(u,v) = if path가 있으면 u부터 v까지 오는 path 중의 min . 없으면 무한대 Variants 최단거리를 찾는 문제는 크게 4종류가 있다. Single-sourc…","fields":{"slug":"/shortest-path/"},"frontmatter":{"categories":"알고리즘","title":"(알고리즘) Shortest Path 찾기 - Bellman-Ford, DAG, Dijkstara 알고리즘","date":"May 09, 2019"}},"next":{"fields":{"slug":"/knapsack-2/"}},"previous":{"fields":{"slug":"/union-find/"}}},{"node":{"id":"07240fe6-6a6d-57aa-90c3-08d5c903f8bf","excerpt":"Branch and Bound? Branch(가지)와 Bound(범위)를 이용한 방법으로 최적의 해를 찾기 위해 어느 정도의 범위를 정해두고 범위를 벗어난 값들을 가지치기 하는 방법을 의미한다. BFS를 이용해 뎁스를 늘려가며 최선의 값을 찾는다고 했을 때 모든 리프까지 가지 않고 어느정도의 바운더리를 정하고 바운더리 밖에 있는 친구들을 제하는 방법을 의미한다. Knapsack에 어떻게 적용해? 각 원소를 넣는 경우와 안 넣는 경우로 두 경우로 가지(Branch)를 쳐가는데 현재 원소의 최대치로 넣었을 때의 경우(bound)가 현재 찾은 최대 가치(max_benefit)을 넘지 못하면 더 이상 볼 가치가 없는 친구이므…","fields":{"slug":"/knapsack-2/"},"frontmatter":{"categories":"알고리즘","title":"(알고리즘) Knapsack 알고리즘 2 Branch and Bound, Heap + 코드","date":"April 20, 2019"}},"next":{"fields":{"slug":"/knapsack-1/"}},"previous":{"fields":{"slug":"/shortest-path/"}}},{"node":{"id":"87dd2c8f-cb1b-5d33-8935-7641ec960b6c","excerpt":"Knapsack 문제란? 배낭에 담을 수 있는 무게의 최댓값이 정해져 있고, 일정 가치와 무게가 있는 짐들을 배낭에 넣을 때,\n가치의 합이 최대가 되도록 짐을 고르는 방법을 찾는 문제를 말한다. 크게 두가지 종류의 문제로 나뉘는데 물건을 쪼갤 수 있다면 Fractional Knapsack Problem 물건을 쪼갤 수 없다면 0-1 Knapsack Problem 이라고 한다. 모든 문제에서 일단 item이라는 struct를 사용했다. 쪼갤 수 있다면? (Greedy) 만일 쪼갤 수 있다면 말그대로 가치( value/weight )가 제일 높은 애들을 최대한 담고 공간이 부족하다면 하나를 쪼개서 부분적으로 넣고 끝내면 …","fields":{"slug":"/knapsack-1/"},"frontmatter":{"categories":"알고리즘","title":"(알고리즘) Knapsack 알고리즘 Greedy, DP + 코드","date":"April 11, 2019"}},"next":null,"previous":{"fields":{"slug":"/knapsack-2/"}}}]}},"staticQueryHashes":["3113817964","334845539"]}