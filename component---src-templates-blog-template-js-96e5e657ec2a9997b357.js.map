{"version":3,"sources":["webpack:///./src/models/post.js","webpack:///./src/components/page-header/index.js","webpack:///./src/components/page-footer/index.js","webpack:///./src/components/layout/index.js","webpack:///./src/components/seo.js","webpack:///./src/components/post-header/index.js","webpack:///./src/components/post-cards-adjacent/index.js","webpack:///./src/components/post-content/index.js","webpack:///./src/components/utterances/index.js","webpack:///./src/templates/blog-template.js"],"names":["Post","id","node","html","excerpt","frontmatter","slug","emoji","categories","title","author","date","this","PageHeader","siteTitle","className","to","githubUrl","Date","href","children","data","useStaticQuery","style","display","flexDirection","minHeight","description","site","metaDescription","htmlAttributes","lang","defaultTitle","meta","property","content","name","ogImage","post","key","category","prevPost","nextPost","dangerouslySetInnerHTML","__html","Utterances","repo","rootElm","React","useEffect","utterances","document","utterancesConfig","src","branch","theme","label","async","crossorigin","Object","ref","curPost","utterancesRepo"],"mappings":"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","file":"component---src-templates-blog-template-js-96e5e657ec2a9997b357.js","sourcesContent":["export default class Post {\n  constructor(node) {\n    const { id, html, excerpt, frontmatter, fields } = node;\n    const { slug } = fields;\n    const { emoji, categories, title, author, date } = frontmatter;\n\n    this.id = id;\n    this.excerpt = excerpt;\n    this.emoji = emoji;\n    this.html = html;\n    this.slug = slug;\n    this.title = title;\n    this.author = author;\n    this.date = date;\n    this.categories = categories.split(' ');\n  }\n}\n","import { Link } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport './style.scss';\n\nconst PageHeader = ({ siteTitle }) => (\n  <header className=\"page-header-wrapper\">\n    <div className=\"page-header\">\n      <div className=\"front-section\">\n        <Link className=\"link\" to=\"/\">\n          {siteTitle}\n        </Link>\n      </div>\n      <div className=\"trailing-section\">\n        <Link className=\"link\" to=\"/about\">\n          about\n        </Link>\n        <Link className=\"link\" to=\"/posts\">\n          posts\n        </Link>\n      </div>\n    </div>\n  </header>\n);\n\nPageHeader.propTypes = {\n  siteTitle: PropTypes.string,\n};\n\nPageHeader.defaultProps = {\n  siteTitle: ``,\n};\n\nexport default PageHeader;\n","import React from 'react';\n\nimport './style.scss';\n\nconst PageFooter = ({ author, githubUrl }) => (\n  <>\n    <footer className=\"page-footer-wrapper\">\n      <p className=\"page-footer\">\n        © {new Date().getFullYear()}\n        &nbsp;\n        <a href={githubUrl}>{author}</a>\n        &nbsp;powered by\n        <a href=\"https://github.com/zoomKoding/zoomkoding-gatsby-blog\">\n          &nbsp;zoomkoding-gatsby-blog\n        </a>\n      </p>\n    </footer>\n  </>\n);\n\nexport default PageFooter;\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport PageHeader from '../page-header';\nimport PageFooter from '../page-footer';\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n          author\n          social {\n            github\n          }\n        }\n      }\n    }\n  `);\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', minHeight: '100vh' }}>\n      <PageHeader siteTitle={data.site.siteMetadata?.title || `Title`} />\n      <main>{children}</main>\n      <PageFooter\n        author={data.site.siteMetadata?.author || `Author`}\n        githubUrl={data.site.siteMetadata?.social?.github || `https://www.github.com`}\n      />\n    </div>\n  );\n};\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Layout;\n","import React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nfunction SEO({ description, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n            ogImage\n          }\n        }\n      }\n    `,\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n  return (\n    <Helmet\n      htmlAttributes={{ lang: 'en' }}\n      title={title}\n      defaultTitle={site.siteMetadata.title}\n      meta={[\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:site_title`,\n          content: title,\n        },\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: 'og:author',\n          content: site.siteMetadata.author,\n        },\n        {\n          property: 'og:image',\n          content: site.siteMetadata.ogImage,\n        },\n\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n      ]}\n    />\n  );\n}\n\nexport default SEO;\n","import { Link } from 'gatsby';\nimport React from 'react';\n\nimport './style.scss';\n\nconst PostHeader = ({ post }) => {\n  return (\n    <header className=\"post-header-wrapper\">\n      <div className=\"post-header\">\n        {post.emoji && <div className=\"emoji\">{post.emoji}</div>}\n\n        <div className=\"info\">\n          <div className=\"categories\">\n            {post.categories.map((category) => (\n              <Link className=\"category\" key={category} to={`/posts/${category}`}>\n                {category}\n              </Link>\n            ))}\n          </div>\n        </div>\n\n        <h1 className=\"title\">{post.title}</h1>\n        <div className=\"info\">\n          <div className=\"author\">\n            posted by <strong>{post.author}</strong>\n          </div>\n          <div className=\"date\"> · {post.date}</div>\n        </div>\n      </div>\n    </header>\n  );\n};\nexport default PostHeader;\n","import { Link } from 'gatsby';\nimport React from 'react';\n\nimport './style.scss';\n\nconst PostCardsAdjacent = ({ prevPost, nextPost }) => {\n  return (\n    <div className=\"post-cards-adjacent-wrapper\">\n      <div className=\"post-cards-adjacent\">\n        {prevPost && (\n          <Link className=\"post-card prev\" key={prevPost.id} to={prevPost.slug}>\n            <div className=\"direction\">이전 글</div>\n            <div className=\"title\">{prevPost.title}</div>\n          </Link>\n        )}\n        {nextPost && (\n          <Link className=\"post-card next\" key={nextPost.id} to={nextPost.slug}>\n            <div className=\"direction\">다음 글</div>\n            <div className=\"title\">{nextPost.title}</div>\n          </Link>\n        )}\n      </div>\n    </div>\n  );\n};\n\n// PostCards.propTypes = {\n//   contents: PropTypes.object({\n//     id: PropTypes.string,\n//     html: PropTypes.string,\n//     frontmatter: PropTypes.object({\n//       date: PropTypes.string,\n//       title: PropTypes.string,\n//       category: PropTypes.string,\n//     }),\n//\n//   }).isRequired,\n// };\n\nexport default PostCardsAdjacent;\n","import React from 'react';\n\nimport './style.scss';\n\nconst PostContent = ({ html }) => (\n  <div className=\"post-content-wrapper\">\n    <div className=\"post-content\">\n      <div className=\"markdown\" dangerouslySetInnerHTML={{ __html: html }} />\n    </div>\n  </div>\n);\n\nexport default PostContent;\n","import React, { useEffect } from 'react';\n\nconst src = 'https://utteranc.es/client.js';\nconst branch = 'master';\n\nexport const Utterances = ({ repo }) => {\n  const rootElm = React.createRef();\n\n  useEffect(() => {\n    if (!rootElm.current || rootElm.current.childNodes.length !== 0) return;\n    const utterances = document.createElement('script');\n    const utterancesConfig = {\n      src,\n      repo,\n      branch,\n      theme: 'github-light',\n      label: 'comment',\n      async: true,\n      'issue-term': 'pathname',\n      crossorigin: 'anonymous',\n    };\n\n    Object.keys(utterancesConfig).forEach((configKey) => {\n      utterances.setAttribute(configKey, utterancesConfig[configKey]);\n    });\n    rootElm.current.appendChild(utterances);\n  }, [repo, rootElm]);\n\n  return <div className=\"utterances\" ref={rootElm} />;\n};\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport Layout from '../components/layout';\nimport SEO from '../components/seo'\n// import TableOfContents from '../components/toc';\nimport PostHeader from '../components/post-header';\nimport PostCardsAdjacent from '../components/post-cards-adjacent';\nimport Post from '../models/post';\nimport PostContent from '../components/post-content';\nimport { Utterances } from '../components/utterances';\n\nexport default ({ data }) => {\n  const curPost = new Post(data.cur);\n  const prevPost = data.prev && new Post(data.prev);\n  const nextPost = data.next && new Post(data.next);\n  const utterancesRepo = data.site?.siteMetadata?.comments?.utterances?.repo;\n  \n  return (\n    <Layout>\n      <SEO title={curPost?.title} description={curPost?.excerpt } />\n      <PostHeader post={curPost} />\n      <PostContent html={curPost.html} />\n      <PostCardsAdjacent prevPost={prevPost} nextPost={nextPost} />\n      {utterancesRepo && <Utterances repo={utterancesRepo} />}\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query($slug: String, $nextSlug: String, $prevSlug: String) {\n    cur: markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      html\n      excerpt(pruneLength: 350, truncate: true)\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        title\n        categories\n        author\n        emoji\n        \n      }\n      fields {\n        slug\n      }\n    }\n\n    next: markdownRemark(fields: { slug: { eq: $nextSlug } }) {\n      id\n      html\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        title\n        categories\n        author\n        emoji\n      }\n      fields {\n        slug\n      }\n    }\n\n    prev: markdownRemark(fields: { slug: { eq: $prevSlug } }) {\n      id\n      html\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        title\n        categories\n        author\n        emoji\n      }\n      fields {\n        slug\n      }\n    }\n\n    site {\n      siteMetadata {\n        comments {\n          utterances {\n            repo\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}